[{"/usr/src/frontend/src/components/Feed.tsx":"1","/usr/src/frontend/src/components/TweetInput.tsx":"2","/usr/src/frontend/src/app/store.ts":"3","/usr/src/frontend/src/index.tsx":"4","/usr/src/frontend/src/serviceWorker.ts":"5","/usr/src/frontend/src/features/userSlice.ts":"6","/usr/src/frontend/src/components/Auth.tsx":"7","/usr/src/frontend/src/App.tsx":"8","/usr/src/frontend/src/components/Post.tsx":"9","/usr/src/frontend/src/firebase.ts":"10"},{"size":1333,"mtime":1609573196296,"results":"11","hashOfConfig":"12"},{"size":3496,"mtime":1609484155824,"results":"13","hashOfConfig":"12"},{"size":394,"mtime":1609481614158,"results":"14","hashOfConfig":"12"},{"size":649,"mtime":1609481643254,"results":"15","hashOfConfig":"12"},{"size":5424,"mtime":1608823132583,"results":"16","hashOfConfig":"12"},{"size":1221,"mtime":1609317471712,"results":"17","hashOfConfig":"12"},{"size":9811,"mtime":1609572738046,"results":"18","hashOfConfig":"12"},{"size":1918,"mtime":1609323244121,"results":"19","hashOfConfig":"12"},{"size":4322,"mtime":1609573341423,"results":"20","hashOfConfig":"12"},{"size":791,"mtime":1609035649499,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"5q4x61",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/usr/src/frontend/src/components/Feed.tsx",[],["49","50"],"/usr/src/frontend/src/components/TweetInput.tsx",[],"/usr/src/frontend/src/app/store.ts",[],["51","52"],"/usr/src/frontend/src/index.tsx",[],["53","54"],"/usr/src/frontend/src/serviceWorker.ts",[],["55","56"],"/usr/src/frontend/src/features/userSlice.ts",[],["57","58"],"/usr/src/frontend/src/components/Auth.tsx",["59","60","61"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateUserProfile } from \"../features/userSlice\";\nimport { auth, provider, storage } from \"../firebase\";\n\nimport {\n  Avatar,\n  Button,\n  CssBaseline,\n  Link,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  Paper,\n  Grid,\n  Typography,\n  makeStyles,\n  Modal,\n  IconButton,\n  Box,\n} from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\nimport CameraIcon from \"@material-ui/icons/Camera\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\n\nconst getModalStyle = () => {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n};\n\nconst Copyright = () => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"Copyright © \"}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{\" \"}\n      {new Date().getFullYear()}\n      {\".\"}\n    </Typography>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: \"100vh\",\n  },\n  image: {\n    backgroundImage:\n      \"url(https://images.unsplash.com/photo-1609008804651-1305d9ebd21d?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1650&q=80)\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  modal: {\n    outline: \"none\",\n    position: \"absolute\",\n    width: 400,\n    borderRadius: 10,\n    backgroundColor: \"white\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(10),\n  },\n}));\n\nconst Auth: React.FC = () => {\n  const classes = useStyles();\n  // actionを起動するにはDispatchが必要なため、useDispatchを定義\n  const dispatch = useDispatch();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [avatarImage, setAvatarImage] = useState<File | null>(null);\n  const [isLogin, setIsLogin] = useState(true);\n  const [openModal, setOpenModal] = useState(false);\n  const [resetEmail, setResetEmail] = useState(\"\");\n\n  const sendResetEmail = async (e: React.MouseEvent<HTMLElement>) => {\n    await auth\n      .sendPasswordResetEmail(resetEmail)\n      .then((_) => {\n        setOpenModal(false);\n        setResetEmail(\"\");\n      })\n      .catch((err) => {\n        alert(err.message);\n        setResetEmail(\"\");\n      });\n  };\n\n  const onChangeImageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files![0]) {\n      setAvatarImage(e.target.files![0]);\n      e.target.value = \"\";\n    }\n  };\n\n  const signInEmail = async () => {\n    await auth.signInWithEmailAndPassword(email, password);\n  };\n  const signUpEmail = async () => {\n    const authUser = await auth.createUserWithEmailAndPassword(email, password);\n    let url = \"\";\n    if (avatarImage) {\n      const S =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n      const N = 16;\n      const randomChar = Array.from(crypto.getRandomValues(new Uint32Array(N)))\n        .map((n) => S[n % S.length])\n        .join(\"\");\n      const fileName = randomChar + \"_\" + avatarImage.name;\n      await storage.ref(`avatars/${fileName}`).put(avatarImage);\n      url = await storage.ref(\"avatars\").child(fileName).getDownloadURL();\n    }\n    await authUser.user?.updateProfile({\n      displayName: username,\n      photoURL: url,\n    });\n    dispatch(\n      updateUserProfile({\n        displayName: username,\n        photoURL: url,\n      })\n    );\n  };\n\n  const signInGoogle = async () => {\n    await auth.signInWithPopup(provider).catch((err) => alert(err.message));\n  };\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            {isLogin ? \"Login\" : \"Register\"}\n          </Typography>\n          <form className={classes.form} noValidate>\n            {!isLogin && (\n              <>\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required\n                  fullWidth\n                  id=\"username\"\n                  label=\"ユーザーネーム\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  autoFocus\n                  value={username}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setUsername(e.target.value)\n                  }\n                />\n                <Box textAlign=\"center\">\n                  <IconButton>\n                    <label>\n                      <AccountCircleIcon\n                        fontSize=\"large\"\n                        className={\n                          avatarImage ? \"login_addIconLoaded\" : \"login_addIcon\"\n                        }\n                      />\n                      <input\n                        className=\"Auth_hiddenIcon\"\n                        type=\"file\"\n                        onChange={onChangeImageHandler}\n                      />\n                    </label>\n                  </IconButton>\n                </Box>\n              </>\n            )}\n\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"メールアドレス\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={email}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setEmail(e.target.value)\n              }\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"パスワード\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setPassword(e.target.value)\n              }\n            />\n            <Button\n              disabled={\n                isLogin\n                  ? !email || password.length < 6\n                  : !username || !email || password.length < 6 || !avatarImage\n              }\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n              startIcon={<EmailIcon />}\n              onClick={\n                isLogin\n                  ? async () => {\n                      try {\n                        await signInEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n                  : async () => {\n                      try {\n                        await signUpEmail();\n                      } catch (err) {\n                        alert(err.message);\n                      }\n                    }\n              }\n            >\n              {isLogin ? \"ログイン\" : \"新規登録\"}\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <span className=\"Auth_reset\" onClick={() => setOpenModal(true)}>\n                  パスワードをお忘れですか?\n                </span>\n              </Grid>\n              <Grid item>\n                <span\n                  className=\"Auth_toggleMode\"\n                  onClick={() => setIsLogin(!isLogin)}\n                >\n                  {isLogin ? \"新規登録はこちら\" : \"ログインに戻る\"}\n                </span>\n              </Grid>\n            </Grid>\n\n            <Button\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              startIcon={<CameraIcon />}\n              className={classes.submit}\n              onClick={signInGoogle}\n            >\n              Googleアカウントでログイン\n            </Button>\n          </form>\n\n          <Modal open={openModal} onClose={() => setOpenModal(false)}>\n            <div style={getModalStyle()} className={classes.modal}>\n              <div className=\"Auth_modal\">\n                <TextField\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  type=\"email\"\n                  name=\"email\"\n                  label=\"Reset E-mail\"\n                  value={resetEmail}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setResetEmail(e.target.value);\n                  }}\n                />\n                <IconButton onClick={sendResetEmail}>\n                  <SendIcon />\n                </IconButton>\n              </div>\n            </div>\n          </Modal>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Auth;\n","/usr/src/frontend/src/App.tsx",["62"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Auth from \"./components/Auth\";\r\nimport Feed from \"./components/Feed\";\r\n\r\n// reducerで作成した関数などをインポート\r\nimport { selectUser, login, logout } from \"./features/userSlice\";\r\n// firebase.tsで作成したfirebase認証機能をインポート\r\nimport { auth } from \"./firebase\";\r\n\r\nconst App: React.FC = () => {\r\n  // reduxのstateの中から、userというstateを取得して、userという変数に代入する。\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    // auth.onAuthStateChangedは、Auth認証に変化を検知し発火するsubscriptionなイベントハンドラー\r\n    // subscription: 動作の監視(常に実行されている)\r\n    const unSub = auth.onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        dispatch(\r\n          // dispatch関数の引数にpayloadを含むことができる\r\n          login({\r\n            // payload\r\n            uid: authUser.uid,\r\n            photoURL: authUser.photoURL,\r\n            displayName: authUser.displayName,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    // CleanUp関数の実行\r\n    // CleanUp関数とは、Appコンポーネントが UnMount(exc: 非表示など)されたときに発火。\r\n    return () => {\r\n      // AppコンポーネントがUnMountされると監視(subscription)が不要(エラーに原因)になるので、監視を解除する関数を発火\r\n      unSub();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  // <> ... </>で囲むことをFlagment(フラグメント)という\r\n  return (\r\n    <>\r\n      {user.uid ? (\r\n        <div className=\"App_feed\">\r\n          <Feed />\r\n        </div>\r\n      ) : (\r\n        <Auth />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/usr/src/frontend/src/components/Post.tsx",[],"/usr/src/frontend/src/firebase.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"63","replacedBy":"69"},{"ruleId":"65","replacedBy":"70"},{"ruleId":"63","replacedBy":"71"},{"ruleId":"65","replacedBy":"72"},{"ruleId":"63","replacedBy":"73"},{"ruleId":"65","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":12,"column":3,"nodeType":"77","messageId":"78","endLine":12,"endColumn":11},{"ruleId":"75","severity":1,"message":"79","line":13,"column":3,"nodeType":"77","messageId":"78","endLine":13,"endColumn":19},{"ruleId":"75","severity":1,"message":"80","line":40,"column":7,"nodeType":"77","messageId":"78","endLine":40,"endColumn":16},{"ruleId":"75","severity":1,"message":"81","line":1,"column":17,"nodeType":"77","messageId":"78","endLine":1,"endColumn":25},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],["82"],["83"],["82"],["83"],["82"],["83"],["82"],["83"],"@typescript-eslint/no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","'FormControlLabel' is defined but never used.","'Copyright' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]